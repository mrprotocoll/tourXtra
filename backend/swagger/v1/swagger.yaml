---
openapi: 3.0.1
info:
  title: TourX API V1
  version: v1
paths:
  "/reservations":
    get:
      summary: list reservations
      tags:
      - Reservations
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful
        '401':
          description: Unauthorized
    post:
      summary: Create reservations
      tags:
      - Reservations
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '201':
          description: successful
        '400':
          description: Bad Request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reservation:
                  type: object
                  properties:
                    tour_id:
                      type: integer
                    start_date:
                      type: string
                      format: date
                    end_date:
                      type: string
                      format: date
              required:
              - start_date
              - end_date
              - tour_id
  "/reservations/{id}":
    get:
      summary: Show reservation
      tags:
      - Reservations
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful
        '401':
          description: Unauthorized
  "/tours":
    get:
      summary: list tours
      tags:
      - Tours
      responses:
        '200':
          description: Successful
    post:
      summary: Create tour
      tags:
      - Tours
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '201':
          description: successful
        '400':
          description: Bad Request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                city:
                  type: string
                price:
                  type: integer
                des:
                  type: string
                video:
                  type: string
                image:
                  type: string
                  format: binary
              required:
              - name
              - city
              - price
              - des
  "/my-tours":
    get:
      summary: list all tours created by user
      tags:
      - Tours
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful
  "/tours/{id}":
    get:
      summary: Show tour
      tags:
      - Tours
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful
        '401':
          description: Unauthorized
  "/users":
    post:
      summary: Create user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: user created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
              - name
              - email
              - password
  "/login":
    post:
      summary: Authenticate user
      tags:
      - Users
      parameters: []
      responses:
        '200':
          description: user authenticated
        '401':
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/users/{id}":
    get:
      summary: Get user by id
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful
        '401':
          description: Unauthorized
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000/api/v1
components:
  securitySchemes:
    bearerAuth:
      type: apiKey
      name: Authorization
      in: header
